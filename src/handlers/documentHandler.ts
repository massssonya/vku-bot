import { DocumentContext } from "../types/json-processor.types.js";
import { JSONProcessor } from "../processors/JSONProcessor.js";
import { createTempDir } from "../utils/temp-utils.js";
import SessionStorage from "../utils/session-storage.js";

export class DocumentHandler {
	async handleDocument(ctx: DocumentContext, processor: JSONProcessor): Promise<void> {

		try {
			const file = ctx.message.document;
			if (!file) {
				await ctx.reply("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
				return;
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
			const isJSON =
				file.mime_type === "application/json" ||
				(file.file_name?.endsWith(".json") ?? false);

			if (!isJSON) {
				await ctx.reply(
					"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json"
				);
				return;
			}

			const fileLink = await ctx.telegram.getFileLink(file.file_id);
			const res = await fetch(fileLink.href);
			const json = await res.json();

			await ctx.reply("üìä –ü–æ–ª—É—á–µ–Ω JSON. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...");

			// –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON —Ñ–∞–π–ª–∞
			const result = await processor.analyze(json);

			const tempDir = createTempDir();
			const sessionId = SessionStorage.create({
				chatId: ctx.chat.id,
				analysisResult: result,
				tempDir,
				json
			});
			await ctx.reply("üìë –í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç—ã?",
				{
					reply_markup: {
						inline_keyboard: [
							[{ text: "üìä Excel", callback_data: `report_excel_${sessionId}` }],
							[{ text: "üìÑ PDF", callback_data: `report_pdf_${sessionId}` }],
						],
					},
				}
			)

		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:", error);
			await ctx.reply(
				"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
			);
		}
	}
}

export const documentHandler = new DocumentHandler();
import fs from 'fs';
import os from 'os';
import path from 'path';

const TEMP_DIR_PREFIX = 'tgjson-';

export function createTempDir() {
  const tempDir = fs.mkdtempSync(path.join(os.tmpdir(), TEMP_DIR_PREFIX));
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${tempDir}`);
  return tempDir;
}

export function cleanupTempFiles() {
  console.log('üßπ –ó–∞–ø—É—Å–∫–∞—é –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  const tempDir = os.tmpdir();
  try {
    const files = fs.readdirSync(tempDir);
    files.forEach((file: string) => {
      if (file.startsWith(TEMP_DIR_PREFIX)) {
        const dirPath = path.join(tempDir, file);
        try {
          fs.rmSync(dirPath, { recursive: true, force: true });
          console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dirPath}`);
        } catch (e) {
          console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}:`, e);
        }
      }
    });
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
  }
}

// module.exports = {
//   createTempDir,
//   cleanupTempFiles,
// };

import path from "path";
import { Context } from "telegraf";
import {
	Diagnostic,
	JSONStructure,
	PathResult,
	ReportFiles,
	Screen
} from "../types/index.js";
const { cleanupTempFiles, createTempDir } = require("../utils/tempUtils.js");

var XLSX = require("xlsx");

class JSONProcessor {
	private screens: Record<string, Screen> = {};
	private edges: Record<string, (string | null)[]> = {};
	private paths: PathResult[] = [];
	private readonly MAX_PATHS = 10000;

	async processJSON(ctx: Context, fileId: string): Promise<void> {
		try {
			await ctx.reply("üìä –ü–æ–ª—É—á–µ–Ω JSON. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...");

			// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
			const fileLink = await ctx.telegram.getFileLink(fileId);
			const res = await fetch(fileLink.href);
			const text = await res.text();
			const json: JSONStructure = JSON.parse(text);

			// –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
			this.analyzeStructure(json);

			const diagnostics = this.generateDiagnostics();
			const start = this.findStartScreen(json);

			if (start) {
				this.findPaths(start);
			} else {
				await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω");
			}

			const unreachable = this.findUnreachableScreens();

			// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
			const tempDir = createTempDir();
			const files = this.generateReports(tempDir, diagnostics, unreachable);

			await ctx.reply("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç—ã...");

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			for (const [type, filepath] of Object.entries(files)) {
				await ctx.replyWithDocument({
					source: filepath,
					filename: `${type}_report.xlsx`
				});
			}

			// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
			setTimeout(() => cleanupTempFiles(), 30000);
		} catch (err) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON:", err);
			throw new Error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: ${err instanceof Error ? err.message : "Unknown error"
				}`
			);
		}
	}

	private analyzeStructure(json: JSONStructure): void {
		this.screens = {};
		(json.screens || []).forEach((s: Screen) => {
			this.screens[s.id] = s;
		});

		this.edges = {};

		const collectEdges = (
			rulesBlock: Record<string, any> | undefined
		): void => {
			if (!rulesBlock) return;

			for (const [screenId, rules] of Object.entries(rulesBlock)) {
				this.edges[screenId] = this.edges[screenId] || [];
				if (!Array.isArray(rules)) continue;

				for (const rule of rules) {
					let nexts: string[] = [];
					if (Array.isArray(rule.nextDisplay)) {
						nexts = rule.nextDisplay;
					} else if (typeof rule.nextDisplay === "string") {
						nexts = [rule.nextDisplay];
					}

					if (nexts.length === 0) {
						this.edges[screenId].push(null);
					} else {
						for (const n of nexts) {
							this.edges[screenId].push(n);
						}
					}
				}
			}
		};

		collectEdges(json.screenRules);
		collectEdges(json.cycledScreenRules);
	}

	private generateDiagnostics(): Diagnostic[] {
		return Object.entries(this.screens).map(([id, scr]) => {
			const rules = this.edges[id] || [];
			const terminal = !!scr.isTerminal;

			return {
				screen: id,
				name: scr.name,
				terminal,
				has_rules: rules.length > 0,
				out_degree: rules.filter(Boolean).length
			};
		});
	}

	private findStartScreen(json: JSONStructure): string | null {
		if (json.init) return json.init;

		for (const [id, scr] of Object.entries(this.screens)) {
			if (scr.isFirstScreen) return id;
		}

		// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —ç–∫—Ä–∞–Ω —Å –≤—Ö–æ–¥—è—â–∏–º–∏ —Å–≤—è–∑—è–º–∏
		const allScreens = new Set(Object.keys(this.screens));
		const hasIncoming = new Set<string>();

		Object.values(this.edges).forEach((targets) => {
			targets.filter(Boolean).forEach((target) => {
				if (typeof target === "string") {
					hasIncoming.add(target);
				}
			});
		});

		const potentialStarts = Array.from(allScreens).filter(
			(screen) => !hasIncoming.has(screen)
		);

		return potentialStarts.length > 0 ? potentialStarts[0] : null;
	}

	private findPaths(start: string): void {
		const dfs = (cur: string, path: string[]): void => {
			if (this.paths.length >= this.MAX_PATHS) return;

			if (path.includes(cur)) {
				this.paths.push({
					path: [...path, cur],
					status: "CYCLE"
				});
				return;
			}

			const nexts = this.edges[cur] || [];

			if (!nexts.length) {
				const term = this.screens[cur]?.isTerminal;
				this.paths.push({
					path: [...path, cur],
					status: term ? "TERMINAL" : "DEAD_END"
				});
				return;
			}

			for (const n of nexts) {
				if (!n) continue;
				dfs(n, [...path, cur]);
			}
		};

		dfs(start, []);
	}

	private findUnreachableScreens(): Array<{ screen: string; name?: string }> {
		const reachable = new Set<string>();

		this.paths.forEach((p) => {
			p.path.forEach((s) => reachable.add(s));
		});

		return Object.keys(this.screens)
			.filter((id) => !reachable.has(id))
			.map((id) => ({
				screen: id,
				name: this.screens[id]?.name
			}));
	}

	private generateReports(
		dir: string,
		diagnostics: Diagnostic[],
		unreachable: Array<{ screen: string; name?: string }>
	): ReportFiles {
		const files: Partial<ReportFiles> = {};

		try {
			// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–∫—Ä–∞–Ω–æ–≤
			const ws1 = XLSX.utils.json_to_sheet(
				diagnostics.map((d) => ({
					"ID —ç–∫—Ä–∞–Ω–∞": d.screen,
					–ù–∞–∑–≤–∞–Ω–∏–µ: d.name || "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è",
					–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π: d.terminal ? "–î–∞" : "–ù–µ—Ç",
					"–ï—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞": d.has_rules ? "–î–∞" : "–ù–µ—Ç",
					"–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏": d.out_degree,
					"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª": this.edges[d.screen]?.length || 0
				}))
			);

			const wb1 = XLSX.utils.book_new();
			XLSX.utils.book_append_sheet(wb1, ws1, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞");
			files.diagnostics = path.join(dir, "diagnostics.xlsx");
			XLSX.writeFile(wb1, files.diagnostics);

			// –ü—É—Ç–∏
			const pathData = this.paths.map((p, index) => ({
				"‚Ññ": index + 1,
				–î–ª–∏–Ω–∞: p.path.length,
				–°—Ç–∞—Ç—É—Å:
					p.status === "CYCLE"
						? "–¶–ò–ö–õ"
						: p.status === "TERMINAL"
							? "–¢–ï–†–ú–ò–ù–ê–õ"
							: "–¢–£–ü–ò–ö",
				–ü—É—Ç—å: p.path.join(" ‚Üí "),
				–≠–∫—Ä–∞–Ω—ã: p.path.length
			}));

			const ws2 = XLSX.utils.json_to_sheet(pathData);
			const wb2 = XLSX.utils.book_new();
			XLSX.utils.book_append_sheet(wb2, ws2, "–ü—É—Ç–∏");
			files.paths = path.join(dir, "paths.xlsx");
			XLSX.writeFile(wb2, files.paths);

			// –ù–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —ç–∫—Ä–∞–Ω—ã
			if (unreachable.length > 0) {
				const ws3 = XLSX.utils.json_to_sheet(
					unreachable.map((u) => ({
						"ID —ç–∫—Ä–∞–Ω–∞": u.screen,
						–ù–∞–∑–≤–∞–Ω–∏–µ: u.name || "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è",
						–¢–∏–ø: this.screens[u.screen]?.isTerminal ? "–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π" : "–û–±—ã—á–Ω—ã–π"
					}))
				);

				const wb3 = XLSX.utils.book_new();
				XLSX.utils.book_append_sheet(wb3, ws3, "–ù–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã–µ");
				files.unreachable = path.join(dir, "unreachable.xlsx");
				XLSX.writeFile(wb3, files.unreachable!);
			}

			// –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
			const summaryData = [
				{
					"–í—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–æ–≤": Object.keys(this.screens).length,
					"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—É—Ç–µ–π": this.paths.length,
					"–ù–µ–¥–æ—Å—Ç–∏–∂–∏–º—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤": unreachable.length,
					"–≠–∫—Ä–∞–Ω—ã —Å —Ü–∏–∫–ª–∞–º–∏": this.paths.filter((p) => p.status === "CYCLE")
						.length,
					"–¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã": this.paths.filter(
						(p) => p.status === "TERMINAL"
					).length
				}
			];

			const ws4 = XLSX.utils.json_to_sheet(summaryData);
			const wb4 = XLSX.utils.book_new();
			XLSX.utils.book_append_sheet(wb4, ws4, "–°–≤–æ–¥–∫–∞");
			files.summary = path.join(dir, "summary.xlsx");
			XLSX.writeFile(wb4, files.summary);
		} catch (error) {
			console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:", error);
			throw error;
		}

		return files as ReportFiles;
	}
}

module.exports = new JSONProcessor();
